// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "./generated"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String // hashed password
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberOf     TeamMember[]  @relation("UserMemberOf")
  appointments Appointment[]
  invites      Invite[]      @relation("UserInvites")

  @@map("users")
}

model Team {
  id           String   @id @default(uuid())
  name         String
  slug         String   @unique
  location     String?
  contactEmail String?
  contactPhone String?
  timezone     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  members       TeamMember[]
  services      Service[]
  appointments  Appointment[]
  settings      TeamSettings?
  businessHours BusinessHour[]
  invites       Invite[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String
  teamId    String
  isActive  Boolean  @default(true)
  bio       String?
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  // Employee-specific fields
  isSchedulable Boolean @default(false)
  
  user User @relation("UserMemberOf", fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
  
  // Employee relations
  availability EmployeeAvailability[]
  blockOffs    EmployeeBlockOff[]
  services     Service[]              @relation("EmployeeServices")
  appointments Appointment[]

  @@unique([userId, teamId])
  @@map("team_members")
}

enum TeamRole {
  ADMIN
  MEMBER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  teamId    String
  role      TeamRole @default(MEMBER)
  token     String   @unique
  expiresAt DateTime
  userId    String?

  team Team  @relation(fields: [teamId], references: [id])
  user User? @relation("UserInvites", fields: [userId], references: [id])

  @@map("invites")
}

model EmployeeAvailability {
  id         String @id @default(uuid())
  teamMemberId String
  dayOfWeek  Int // 0 = Sunday
  startTime  String // "09:00"
  endTime    String // "17:00"

  teamMember TeamMember @relation(fields: [teamMemberId], references: [id])

  @@map("employee_availability")
}

model EmployeeBlockOff {
  id         String   @id @default(uuid())
  teamMemberId String
  start      DateTime
  end        DateTime
  reason     String?

  teamMember TeamMember @relation(fields: [teamMemberId], references: [id])

  @@map("employee_block_offs")
}

model Service {
  id           String  @id @default(uuid())
  teamId       String
  name         String
  description  String?
  duration     Int // in minutes
  buffer       Int     @default(0)
  price        Float?  @default(0)
  currencyCode String? @default("USD")
  category     String?

  team         Team          @relation(fields: [teamId], references: [id])
  teamMembers  TeamMember[]  @relation("EmployeeServices")
  appointments Appointment[]

  @@map("services")
}

model Appointment {
  id          String            @id @default(uuid())
  teamId      String
  teamMemberId String
  serviceId   String
  userId      String?
  clientName  String
  clientEmail String
  clientPhone String?
  start       DateTime
  end         DateTime
  status      AppointmentStatus @default(CONFIRMED)
  notes       String?

  team     Team     @relation(fields: [teamId], references: [id])
  teamMember TeamMember @relation(fields: [teamMemberId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  user     User?    @relation(fields: [userId], references: [id])

  @@map("appointments")
}

enum AppointmentStatus {
  CONFIRMED
  CANCELLED
  RESCHEDULED
  COMPLETED
}

model TeamSettings {
  id                         String  @id @default(uuid())
  teamId                     String  @unique
  minBookingNoticeMinutes    Int     @default(60)
  cancellationPolicy         String?
  maxAppointmentsPerDay      Int?
  maxAppointmentsPerEmployee Int?

  team Team @relation(fields: [teamId], references: [id])

  @@map("team_settings")
}

model BusinessHour {
  id        String @id @default(uuid())
  teamId    String
  dayOfWeek Int // 0-6
  openTime  String // "09:00"
  closeTime String // "17:00"

  team Team @relation(fields: [teamId], references: [id])

  @@map("business_hours")
}
